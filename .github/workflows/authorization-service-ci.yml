name: Authorization Service CI

on:
  push:
    branches:
      - master

env:
  buildConfiguration: release
  pipelineVersion: 0.7

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.200

      - name: Build with dotnet
        run: dotnet build ./src/ApiExampleProject.sln --configuration $buildConfiguration

      - name: Test with dotnet
        run: dotnet test ./src/ApiExampleProject.sln --filter Category!=Integration --configuration $buildConfiguration

  credScan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: gitCret
        uses: CySeq/gitcret@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publishAuthorizationServiceApi:
    runs-on: ubuntu-latest
    needs: [ build, credScan ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.200

      - name: Publish with dotnet
        run: dotnet publish --configuration $buildConfiguration --output ./output/PolicyManager ./src/Authorization/PolicyManager/PolicyManager.csproj
  
      - name: Upload to Publish Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: policy-manager-publish
          path: ./output/PolicyManager

  publishCustomerDataServiceApi:
    runs-on: ubuntu-latest
    needs: [ build, credScan ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.200

      - name: Publish with dotnet
        run: dotnet publish --configuration $buildConfiguration --output ./output/CustomerData ./src/CustomerData/ApiExampleProject.CustomerData/ApiExampleProject.CustomerData.csproj
  
      - name: Upload to Publish Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: customer-data-publish
          path: ./output/CustomerData

  publishOrderDataServiceApi:
    runs-on: ubuntu-latest
    needs: [ build, credScan ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.200

      - name: Publish with dotnet
        run: dotnet publish --configuration $buildConfiguration --output ./output/OrderSystem ./src/OrderSystem/ApiExampleProject.OrderSystem/ApiExampleProject.OrderSystem.csproj
  
      - name: Upload to Publish Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: order-data-publish
          path: ./output/OrderSystem

  runIntegrationTests:
    runs-on: ubuntu-latest
    needs: [ publishAuthorizationServiceApi, publishCustomerDataServiceApi, publishOrderDataServiceApi ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.200

      - name: Download Policy Manager Artifacts
        uses: actions/download-artifact@v1
        with:
          name: policy-manager-publish

      - name: Download Customer Data Artifacts
        uses: actions/download-artifact@v1
        with:
          name: customer-data-publish

      - name: Download Order Data Artifacts
        uses: actions/download-artifact@v1
        with:
          name: order-data-publish

      - name: Test with dotnet
        run: |
          pushd ./src/IntegrationTests/ApiExampleProject.IntegrationTests
          dotnet publish ./ApiExampleProject.IntegrationTests.csproj --output ../../../output/
          popd

          pushd ./output/
          npm i azure-functions-core-tools@3 --unsafe-perm true
          chmod +x ./node_modules/azure-functions-core-tools/bin/func
          
          pushd ../policy-manager-publish
          ../output/node_modules/azure-functions-core-tools/bin/func start --csharp -p 7001 &
          popd

          pushd ../customer-data-publish
          ../output/node_modules/azure-functions-core-tools/bin/func start --csharp -p 7002 &
          popd
          
          pushd ../order-data-publish
          ../output/node_modules/azure-functions-core-tools/bin/func start --csharp -p 7003 &
          popd

          sudo apt-get install httping -y
          while ! httping -qc1 http://localhost:7001 ; do sleep 1 ; done
          while ! httping -qc1 http://localhost:7002 ; do sleep 1 ; done
          while ! httping -qc1 http://localhost:7003 ; do sleep 1 ; done

          dotnet vstest ApiExampleProject.IntegrationTests.dll --logger:"trx;LogFileName=integration-results.trx"
          popd
        env:
          TokenCreator__TenantId: 1e1a5e3a-f0ea-45c9-9d80-d88e4d8ed378
          TokenCreator__ClientId: 0b861016-b56c-49b0-899a-b2e24537cb1d
          TokenCreator__ClientSecret: ${{ secrets.APP_CLIENT_SECRET }}
          TokenCreator__Scopes: api://jwpolicymanager/user_impersonation
          TokenCreator__TestUsername: testuser@jwendl.net
          TokenCreator__TestPassword: ${{ secrets.TEST_PASSWORD }}
          TokenValidator__Audience: api://jwpolicymanager
          TokenValidator__TenantId: 1e1a5e3a-f0ea-45c9-9d80-d88e4d8ed378
          TokenValidator__ClientId: 0b861016-b56c-49b0-899a-b2e24537cb1d
          PolicyManagerClientConfiguration__ApiServiceUri: http://localhost:7001/
          CustomerDataClientConfiguration__ApiServiceUri: http://localhost:7002/

      - name: Upload to Publish Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: test-results-publish
          path: ./output/TestResults/integration-results.trx

  deployTerraformScripts:
    runs-on: ubuntu-latest
    needs: [ runIntegrationTests ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: 'Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: 'deployment/cloud'
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARM_SUBSCRIPTION_ID: 959965bb-d9df-4c6f-825e-37e1090d817d
          ARM_TENANT_ID: 72f988bf-86f1-41af-91ab-2d7cd011db47
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: 'deployment/cloud'
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARM_SUBSCRIPTION_ID: 959965bb-d9df-4c6f-825e-37e1090d817d
          ARM_TENANT_ID: 72f988bf-86f1-41af-91ab-2d7cd011db47
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: 'deployment/cloud'
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARM_SUBSCRIPTION_ID: 959965bb-d9df-4c6f-825e-37e1090d817d
          ARM_TENANT_ID: 72f988bf-86f1-41af-91ab-2d7cd011db47
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: 'deployment/cloud'
          tf_actions_comment: true
          args: '-out=plan.tfplan'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARM_SUBSCRIPTION_ID: 959965bb-d9df-4c6f-825e-37e1090d817d
          ARM_TENANT_ID: 72f988bf-86f1-41af-91ab-2d7cd011db47
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
          TF_VAR_key_vault_resource_group_name: KeyVault
          TF_VAR_key_vault_location: westus2
          TF_VAR_key_vault_name: jwapikeyvault
          TF_VAR_key_vault_tenant_id: 72f988bf-86f1-41af-91ab-2d7cd011db47
          TF_VAR_terraform_tenant_id: 72f988bf-86f1-41af-91ab-2d7cd011db47
          TF_VAR_terraform_object_id: 84783e6e-8d71-4f78-867b-104338ed6618
          TF_VAR_policy_manager_resource_group_name: PolicyManager
          TF_VAR_policy_manager_location: westus2
          TF_VAR_policy_manager_storage_account_name: jwpolicymanagerstorage
          TF_VAR_policy_manager_functions_plan_name: jwpolicymanagerplan
          TF_VAR_policy_manager_functions_name: jwpolicymanagerapi
          TF_VAR_app_audience: api://jwpolicymanager
          TF_VAR_app_tenant_id: 1e1a5e3a-f0ea-45c9-9d80-d88e4d8ed378
          TF_VAR_app_client_id: 0b861016-b56c-49b0-899a-b2e24537cb1d
          TF_VAR_app_client_secret_key_vault_uri: https://jwappkeyvault.vault.azure.net/secrets/app-client-secret/
          TF_VAR_policy_manager_app_insights_name: jwpolicymanagerai
          TF_VAR_policy_manager_sql_server_name: jwpolicymanagerdb
          TF_VAR_policy_manager_sql_database_name: PolicyManager
          TF_VAR_policy_manager_sql_tenant_id: 72f988bf-86f1-41af-91ab-2d7cd011db47
          TF_VAR_policy_manager_sql_object_id: 2609bcf7-475f-49c0-8040-85e667b4f3aa
          TF_VAR_customer_data_resource_group_name: CustomerData
          TF_VAR_customer_data_location: westus2
          TF_VAR_customer_data_storage_account_name: jwcustomerdatastorage
          TF_VAR_customer_data_functions_plan_name: jwcustomerdataplan
          TF_VAR_customer_data_functions_name: jwcustomerdataapi
          TF_VAR_customer_data_app_insights_name: jwcustomerdataai
          TF_VAR_customer_data_sql_server_name: jwcustomerdatadb
          TF_VAR_customer_data_sql_database_name: CustomerData
          TF_VAR_customer_data_sql_tenant_id: 72f988bf-86f1-41af-91ab-2d7cd011db47
          TF_VAR_customer_data_sql_object_id: 2609bcf7-475f-49c0-8040-85e667b4f3aa
          TF_VAR_order_data_resource_group_name: OrderData
          TF_VAR_order_data_location: westus2
          TF_VAR_order_data_storage_account_name: jworderdatastorage
          TF_VAR_order_data_functions_plan_name: jworderdataplan
          TF_VAR_order_data_functions_name: jworderdataapi
          TF_VAR_order_data_app_insights_name: jworderdataai
          TF_VAR_order_data_cosmos_server_name: jworderdatadb
          TF_VAR_order_data_cosmos_failover_location: eastus
          TF_VAR_order_data_cosmos_sql_database: OrderData
          TF_VAR_cosomos_primary_key_secret_key_vault_uri: https://jwappkeyvault.vault.azure.net/secrets/cosmos-primary-key/
          TF_VAR_dashboard_resource_group_name: Dashboard
          TF_VAR_dashboard_name: jwdashboard
          TF_VAR_dashboard_location: westus2

      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: 'deployment/cloud'
          tf_actions_comment: true
          args: 'plan.tfplan'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARM_SUBSCRIPTION_ID: 959965bb-d9df-4c6f-825e-37e1090d817d
          ARM_TENANT_ID: 72f988bf-86f1-41af-91ab-2d7cd011db47
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

  deployAuthorizationService:
    runs-on: ubuntu-latest
    needs: [ deployTerraformScripts ]
    steps:
      - name: Download Publish Artifacts
        uses: actions/download-artifact@v1
        with:
          name: policy-manager-publish
          
      - name: Create Deployment Archive
        run: |
          pushd ./policy-manager-publish/
          zip -r ../policy-manager.zip ./*
          popd

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PIPELINE_CREDS }}

      - name: Azure Functions Action
        uses: Azure/functions-action@v1.1.3
        with:
          app-name: jwpolicymanagerapi
          package: ./policy-manager.zip

  deployCustomerDataService:
    runs-on: ubuntu-latest
    needs: [ deployTerraformScripts ]
    steps:
      - name: Download Publish Artifacts
        uses: actions/download-artifact@v1
        with:
          name: customer-data-publish
          
      - name: Create Deployment Archive
        run: |
          pushd ./customer-data-publish/
          zip -r ../customer-data.zip ./*
          popd

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PIPELINE_CREDS }}

      - name: Azure Functions Action
        uses: Azure/functions-action@v1.1.3
        with:
          app-name: jwcustomerdataapi
          package: ./customer-data.zip

  deployOrderDataService:
    runs-on: ubuntu-latest
    needs: [ deployTerraformScripts ]
    steps:
      - name: Download Publish Artifacts
        uses: actions/download-artifact@v1
        with:
          name: order-data-publish
          
      - name: Create Deployment Archive
        run: |
          pushd ./order-data-publish/
          zip -r ../order-data.zip ./*
          popd

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PIPELINE_CREDS }}

      - name: Azure Functions Action
        uses: Azure/functions-action@v1.1.3
        with:
          app-name: jworderdataapi
          package: ./order-data.zip
