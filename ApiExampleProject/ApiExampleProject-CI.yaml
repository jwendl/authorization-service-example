# Build Pipeline

trigger:
- master
pr:
- none

variables:
  buildConfiguration: release

stages:
- stage: Build
  jobs:

  - job: BuildAndTest
    displayName: 'Build and Test'
    pool:
      vmImage: 'ubuntu-latest'

    steps:

    - task: UseDotNet@2
      displayName: 'Ensure .NET Core SDK 3.1.100 is installed'
      inputs:
        packageType: sdk
        version: 3.1.100
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: restore
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Projects'
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(configuration)'

    - task: DotNetCoreCLI@2
      displayName: 'Unit Tests'
      inputs:
        command: test
        projects: '**/*.Tests.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Customer Data Api'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(System.DefaultWorkingDirectory)/ApiExampleProject/CustomerData/ApiExampleProject.CustomerData/ApiExampleProject.CustomerData.csproj'
        arguments: '--no-build --configuration $(buildConfiguration) --output $(System.DefaultWorkingDirectory)/Output/CustomerData/'
        zipAfterPublish: false

    - task: PublishPipelineArtifact@1
      displayName: 'Publish terraform templates'
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/ApiExampleProject/Deployment'
        artifact: 'Deployment'

# Release Pipeline - implicit CD trigger on completion of CI 
- stage: Development
  jobs:
  
  - deployment: DevelopmentDeploymentJob
    environment: Development
    pool:
      vmImage: 'ubuntu-latest'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              targetPath: '$(Pipeline.Workspace)'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'msft-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'scriptPath'
              scriptPath: '$(Pipeline.Workspace)/Deployment/add-tf-storage.sh'
              arguments: '-r Storage -n jwtfstorage -l westus2'

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '0.12.3'

          - task: TerraformTaskV1@0
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/Deployment/'
              backendServiceArm: 'msft-azure-connection'
              backendAzureRmResourceGroupName: 'Storage'
              backendAzureRmStorageAccountName: 'jwtfstorage'
              backendAzureRmContainerName: 'terraform-state'
              backendAzureRmKey: 'api-example-project.tfstate'

          - task: TerraformTaskV1@0
            displayName: Run terraform plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/Deployment/'
              commandOptions: '-var "dashboard_resource_group_name=Dashboard" -var "dashboard_name=jwdashboard" -var "dashboard_location=westus2" -var "key_vault_app_registration_name=jwpolicymanager" -var "key_vault_resource_group_name=KeyVault" -var "key_vault_location=westus2" -var "key_vault_name=jwapikeyvault" -var "key_vault_tenant_id=72f988bf-86f1-41af-91ab-2d7cd011db47" -var "key_vault_object_id=8f6370ec-e73b-4dd1-b7de-f7b1cd1644b9" -var "policy_manager_resource_group_name=PolicyManager" -var "policy_manager_location=westus2" -var "policy_manager_storage_account_name=jwpolicymanagerstorage" -var "policy_manager_functions_plan_name=jwpolicymanagerplan" -var "policy_manager_functions_name=jwpolicymanager" -var "policy_manager_app_insights_name=jwpolicymanagerai" -var "policy_manager_sql_server_name=jwpolicymanagerdb" -var "policy_manager_sql_admin_login=jwendl" -var "policy_manager_sql_admin_password=Ihm5pwd!" -var "policy_manager_sql_database_name=PolicyManager" -var "policy_manager_sql_tenant_id=72f988bf-86f1-41af-91ab-2d7cd011db47" -var "policy_manager_sql_object_id=2609bcf7-475f-49c0-8040-85e667b4f3aa"'
              environmentServiceNameAzureRM: 'msft-azure-connection'
